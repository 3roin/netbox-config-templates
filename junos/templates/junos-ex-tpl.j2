{#- ***********************************************
###            Pre-defined variables            ###
************************************************ #}
{#-  Defining interfaces for VC or single device #}
{%- set interfaces = [] %}
{%- if device.virtual_chassis %}
{%- for node in device.virtual_chassis.members.all() %}
{%- for interface in node.interfaces.all() %}
{%- set interfaces = interfaces.append(interface) %}
{%- endfor %}
{%- endfor %}
{%- else %}
{%- for interface in device.interfaces.all() %}
{%- set interfaces = interfaces.append(interface) %}
{%- endfor %}
{%- endif %}
{#-        Defining DHCP local server flags      #}
{%- set dhcp_group_exists = interfaces | selectattr("cf.dhcp_group", "defined") | map(attribute="cf.dhcp_group") | unique | list %}
{%- set dhcp_pools_default = [] %}
{%- set dhcp_pools_vrfs = [] %}
{%- for interface in interfaces %}
{%- if interface.cf.dhcp_pools != None %}
{%- for pool in interface.cf.dhcp_pools %}
{%- if not pool.vrf %}
{%- set dhcp_pools_default = dhcp_pools_default.append(pool) %}
{%- else %}
{%- set dhcp_pools_vrfs = dhcp_pools_vrfs.append(pool) %}
{%- endif %}
{%- endfor %}
{%- endif %}
{%- endfor %}
{#-     Defining VRFs for VC or single device    #}
{%- set instances = interfaces | selectattr("vrf.name", "defined") | map(attribute="vrf") | unique | list %}
{#- ***********************************************
###             Template MACROs                 ###
************************************************ #}
{#-       Interfaces configuration macro         #}
{%- macro ifs_config(interfaces) %}
{%- for interface in interfaces %}
{%- set fhrp_enabled = true if interface.fhrp_group_assignments.all()|length > 0 %}
{%- set ifname = interface.name.split('.')|first %}
{%- set unit_id = interface.name.split('.')|last if '.' in interface.name else None %}
{%- set count_ipaddr = interface.ip_addresses.all()|length %}
{%- set lag_member = interface.lag != None %}
{%- set lag_agg = interface.type == "lag" %}
{%- set has_tagged_vlans = interface.tagged_vlans != None and 'tagged' in interface.mode %}
{%- set is_access_mode = interface.mode == 'access' %}
    {{ ifname }} {
        {%- if not interface.enabled %}
        disable;
        {%- endif %}
        {%- if '.' not in interface.name %}
        description "{{ interface.description | default("Missing description", true) }}";
        {%- endif %}
        {%- if interface.mtu %}
        mtu {{ interface.mtu }};
        {%- endif %}
        {%- if lag_agg %}
        aggregated-ether-options {
            lacp {
                active;
            }
            minimum-links 1;
        }
        {%- endif %}
        {%- if count_ipaddr > 0 %}
        {%- if '.' in interface.name %}
        unit {{ unit_id or 0 }} {
            description "{{ interface.description | default("Missing description", true) }}";
        {%- else %}
        unit 0 {
        {%- endif %}
            family inet {
                {%- for ipaddr in interface.ip_addresses.all() %}
                {%- if fhrp_enabled and ipaddr.role == "vrrp" %}
                address {{ ipaddr }} {
                    {%- for gr in interface.fhrp_group_assignments.all() %}
                    vrrp-group {{ gr.group.group_id }} {
                        {%- for vip in gr.group.ip_addresses.all() %}
                        virtual-address {{ (vip|string).split('/')|first }};
                        {%- endfor %}
                        priority {{ gr.priority }};
                        accept-data;
                        preempt {
                            hold-time 180;
                        }
                    }
                    {%- endfor %}
                }
                {%- else %}
                address {{ ipaddr }};
                {%- endif %}
                {%- endfor %}
            }
        }
        {%- elif lag_member %}
        gigether-options {
            802.3ad {
                {{ interface.lag.name }};
            }
        }
        {%- elif has_tagged_vlans %}
        {%- if interface.untagged_vlan != None %}
        native-vlan-id {{ interface.untagged_vlan.vid }};
        {%- endif %}
        unit 0 {
            family ethernet-switching {
                {%- for tag in interface.tags.all() %}
                {%- for scp in storm_control_profiles %}
                {%- if tag["name"] == scp["name"] %}
                storm-control {{ scp["name"] }};
                {%- endif %}
                {%- endfor %}
                {%- endfor %}
                {%- if interface.mode == 'tagged' %}
                interface-mode trunk;
                vlan {
                    members [ {% for vlan in interface.tagged_vlans.all() %}{{ vlan.vid }} {% endfor %}];
                }
                {%- elif 'tagged-all' in interface.mode %}
                interface-mode trunk;
                vlan {
                    members all;
                }
            {%- endif %}
            }
        }
        {%- elif is_access_mode %}
        unit 0 {
            family ethernet-switching {
                {%- for tag in interface.tags.all() %}
                {%- for scp in storm_control_profiles %}
                {%- if tag["name"] == scp["name"] %}
                storm-control {{ scp["name"] }};
                {%- endif %}
                {%- endfor %}
                {%- endfor%}
                interface-mode access;
                vlan {
                    members {{ interface.untagged_vlan.vid }};
                }
            }
        }
        {%- else %}
        unit 0;
        {%- endif %}
    }
    {%- endfor %}
{%- endmacro %}
{#-      Static routes configuration macro       #}
{%- macro static_route_cfg(all_static_routes) %}
{%- for route in all_static_routes %}
route {{ route["name"] }} {
    {%- for key, value in route.items() %}
    {%- if value is string and key != "name" %}
    {{ key }} {{ value }};
    {%- elif value is mapping %}
    {{ key }} {
        {%- for key1, value1 in value.items() %}
        {%- if value1 is string or value1 is number %}
        {{ key1 }} {{ value1 }};
        {%- elif value1 is mapping %}
        {{ key1 }} {
            {%- for key2, value2 in value1.items() %}
            {%- if value2 is string or value2 is number %}
            {{ key2 }} {{ value2 }};
            {%- else %}
            {{ key2 }};
            {%- endif %}
            {%- endfor %}
        }
        {%- else %}
        {{ key1 }};
        {%- endif %}
        {%- endfor %}
    }
    {%- elif value is iterable and value is not string and value | length > 1 %}
    {{ key }} [ {% for value_item in value %}{{ value_item }} {% endfor %}];
    {%- elif value is iterable and value is not string %}
    {%- for value_item in value %}
    {%- if value_item is string or number %}
    {{ key }} {{ value_item }};
    {%- elif value_item is mapping %}
    {{ key }} {{ value_item["name"] }} {
        {%- for key_vi, val_vi in value_item.items() %}
        {%- if val_vi is string and key_vi != "name" or val_vi is number  %}
        {{ key_vi }} {{ val_vi }};
        {%- endif %}
        {%- endfor %}
    }
    {%- endif %}
    {%- endfor %}
    {%- endif %}
    {%- endfor %}
}
{%- endfor %}
{%- endmacro %}
{#-       VRF instances configuration macro      #}
{%- macro vrf_cfg(instances) %}
{%- if instances | length > 0 %}
routing-instances {
    {%- for instance in instances %}
    {{ instance.name|upper }} {
        instance-type {{ instance.cf.vrf_instance_type }};
        {%- for interface in interfaces %}
        {%- if interface.vrf.name|upper == instance.name|upper %}
        interface {{ interface.name }};
        {%- endif %}
        {%- endfor %}
        {%- if instance.name in dhcp_pools_vrfs | selectattr("vrf.name", "defined") | map(attribute="vrf.name") | unique | list %}
        system {
            services {
                dhcp-local-server {
                    {%- for interface in interfaces %}
                    {%- if interface.vrf.name|upper == instance.name|upper and interface.cf.dhcp_group %}
                    group "DHCP_GR_{{ interface.cf.dhcp_group | upper }}" {
                        interface {{ interface["name"] }};
                    }
                    {%- endif %}
                    {%- endfor %}
                }
            }
        }
        access {
            address-assignment {
                {%- for pool in dhcp_pools_vrfs %}
                {%- if pool.vrf.name == instance.name %}
                {{- dhcp_pool_cfg(pool) | indent(16) }}
                {%- endif %}
                {%- endfor %}
            }
        }
        {%- endif %}        
        {%- if static_routes[instance.name] is defined and static_routes[instance.name]["route"] %}
        routing-options {
            static {
                {{- static_route_cfg(static_routes[instance.name]["route"]) | indent(16) }}
            }
        }
        {%- endif %}
        {%- if dhcp_relay is defined and dhcp_relay[instance.name] %}
        forwarding-options {
            {{- dhcp_relay_cfg(dhcp_relay[instance.name]) | indent(12) }}
        }
        {%- endif %}
    }
    {%- endfor %}
}
{%- endif %}
{%- endmacro %}
{#-        DHCP relay configuration macro        #}
{%- macro dhcp_relay_cfg(relay_info) %}
dhcp-relay {
    {%- if relay_info["server-group"] %}
    {%- set sg = relay_info["server-group"]["server-group"] %}
    server-group {
        {%- for relay_sg in sg %}
        {{ relay_sg["name"] }} {
            {%- for relay_srv in relay_sg["address"] %}
            {{ relay_srv["name"] }};
            {%- endfor %}
        }
        {%- endfor %}
    }
    {%- endif %}
    {%- if relay_info["group"] %}
    {%- for gr in relay_info["group"] %}
    group {{ gr["name"] }} {
        {%- for key, value in gr.items() %}
        {%- if key == "active-server-group" %}
        active-server-group {{ value["active-server-group"] }};
        {%- elif value is mapping %}
        {{ key }} {
            {%- for key1, value1 in value.items() %}
            {%- if value1 is string or value1 is number %}
            {{ key1 }} {{ value1 }};
            {%- elif value1 is mapping %}
            {{ key1 }} {
                {%- for key2, value2 in value1.items() %}
                {%- if value2 is string or value2 is number %}
                {{ key2 }} {{ value2 }};
                {%- else %}
                {{ key2 }};
                {%- endif %}
                {%- endfor %}
            }
            {%- else %}
            {{ key1 }};
            {%- endif %}
            {%- endfor %}
        }
        {%- endif %}
        {%- endfor %}
        {%- for interface in interfaces %}
        {%- for tag in interface.tags.all() %}
        {%- if gr["name"]|upper == tag["name"]|upper %}
        interface {{ interface.name }};
        {%- endif %}
        {%- endfor %}
        {%- endfor %}
    }
    {%- endfor %}
    {%- endif %}
}
{%- endmacro %}
{#-      DHCP local server pools config macro    #}
{%- macro dhcp_pool_cfg(pool) %}
pool "{{ (pool | string) | replace(".", "_") | replace("/", "-") }}" {
    family inet {
        network {{ pool }};
        {%- for range in pool.cf.dhcp_pool_ranges %}
        range {{ (range | string).split("/") | first | replace(".", "_") }} {
            low {{ range.start_address.ip }};
            high {{ range.end_address.ip }};
        }
        {%- endfor %}
        dhcp-attributes {
            name-server {
                {%- for dns in pool.cf.dhcp_pool_dns.split(", ") %}
                {{ dns }};
                {%- endfor %}
            }
            router {
                {%- for gw in pool.cf.dhcp_pool_gw %}
                {{ (gw | string).split("/") | first }};
                {%- endfor %}
            }
        }
    }
}
{%- endmacro %}
{#- ***********************************************
###           Configuration section             ###
************************************************ #}
{#- ***********************************************
###           System configuration              ###
************************************************ #}
version {{ junos_version }};
{%- if device.virtual_chassis %}
groups {
    member0 {
        system {
            host-name {% for node in device.virtual_chassis.members.all() %}{%- if node.vc_position == 0 %}{{ node.name }}{%- endif %}{%- endfor %};
        }
    }
    member1 {
        system {
            host-name {% for node in device.virtual_chassis.members.all() %}{%- if node.vc_position == 1 %}{{ node.name }}{%- endif %}{%- endfor %};
        }
    }
}
apply-groups [ member0 member1 ];
{%- endif %}
system {
    {%- if device.virtual_chassis %}
    commit synchronize;
    {%- else %}
    host-name {{ device.name }};
    {%- endif %}
    root-authentication {
        encrypted-password "{{ root_passwd }}";
    }
    login {
        idle-timeout {{ login_idle_timeout | default("60", true) }};
        {%- if login["user"] %}
        {%- for usr in login["user"] %}
        user {{ usr["name"] }} {
            class {{ usr["class"] }};
            uid {{ usr["uid"] }};
            authentication {
                {%- for method, opt in usr["authentication"].items() %}
                {%- for opt_val in opt %}
                {{ method }} "{{ opt_val["name"] }}";
                {%- endfor %}
                {%- endfor %}
            }
        }
        {%- endfor %}
        {%- endif %}
    }
    services {
        ssh {
            root-login allow;
            protocol-version v2;
        }
        netconf {
            ssh {
                port {{netconf_port | default("830", true) }};
            }
        }
        {%- if dhcp_group_exists and dhcp_pools_default %}
        dhcp-local-server {
            {%- for interface in interfaces %}
            {%- if not interface.vrf and interface.cf.dhcp_group %}
            group "DHCP_GR_{{ interface.cf.dhcp_group | upper }}" {
                interface {{ interface["name"] }};
            }
            {%- endif %}
            {%- endfor %}
        }
        {%- endif %}
    }
    {%- if authentication_order %}
    authentication-order [ {% for auth in authentication_order %}{{ auth }} {% endfor %}];
    {%- endif %}
    {%- if radius_server %}
    radius-server {
        {%- for rad in radius_server %}
        {{ rad["name"] }} {
            secret "{{ rad["secret"] }}";
            routing-instance {{ rad["routing-instance"] }};
            source-address {{ device.primary_ip.address.ip }};
        }
        {%- endfor %}
    }
    {%- endif %}
    {%- if radius_options %}
    radius-options {
        password-protocol {{ radius_options["password-protocol"] }};
    }
    {%- endif %}
    {%- if tacplus_server %}
    tacplus-server {
        {%- for tac in tacplus_server %}
        {{ tac["name"] }} {
            secret "{{ tac["secret"] }}";
            routing-instance {{ tac["routing-instance"] }};
            single-connection;
            source-address {{ device.primary_ip.address.ip }};
        }
        {%- endfor %}
    }
    {%- endif %}
    {%- if accounting %}
    accounting {
        {%- if accounting["events"] %}
        events [ {% for event in accounting["events"] %}{{ event }} {% endfor %}];
        {%- endif %}
        destination {
            {%- for proto, srv_list in accounting["destination"].items() %}
            {{ proto }} {
                {%- for name, props in srv_list.items() %}
                {{ name }} {
                    {%- for srv in props %}
                    {{ srv["name"] }} {
                        {%- for key, value in srv.items() %}
                        {%- if key == "secret" %}
                        {{ key }} "{{ value }}";
                        {%- elif key == "single-connection" %}
                        single-connection;
                        {%- elif key != "name" %}
                        {{ key }} {{ value }};
                        {%- endif %}
                        {%- endfor %}
                        source-address {{ device.primary_ip.address.ip }};
                    }
                    {%- endfor %}
                }
                {%- endfor %}
            }
            {%- endfor %}
        }
    }
    {%- endif %}
    syslog {
        user * {
            any emergency;
        }
        file interactive-commands {
            interactive-commands any;
        }
        file messages {
            any notice;
            authorization info;
        }
    }
    {%- if name_server %}
    name-server {
        {%- for dns_srv in name_server %}
        {{ dns_srv["name"] }};
        {%- endfor %}
    }
    {%- endif %}
    {%- if ntp %}
    ntp {
        {%- for ntp_srv in ntp["server"] %}
        server {{ ntp_srv["name"] }};
        {%- endfor %}
        {%- if device.primary_ip.address %}
        source-address {{ device.primary_ip.address.ip }};
        {%- endif %}
    }
    {%- endif %}
    {%- if domain_name %}
    domain-name {{domain_name }};
    {%- endif %}
    {%- if time_zone %}
    time-zone {{ time_zone }};
    {%- endif %}
}
{#- ***********************************************
###           Access configuration              ###
*************************************************#}
{%- if dhcp_pools_default %}
access {
    address-assignment {
        {%- for pool in dhcp_pools_default %}
        {{- dhcp_pools_cfg(pool) | indent(8) }}
        {%- endfor %}
    }
}
{%- endif %}
{#- **************************************************
###           SNMP configuration              ###
**************************************************#}
{%- if snmp %}
snmp {
    {%- if snmp["view"] %}
    {%- for snmp_view in snmp["view"] %}
    view {{ snmp_view["name"] }} {
        {%- for oid in snmp_view["oid"] %}
        oid {{ oid["name"] }};
        {%- endfor %}
    }
    {%- endfor %}
    {%- endif %}
    name "{{ device.name }}";
    location "{{ device.location | default("UNDEFINED LOCATION", true) }}";
    {%- for list in snmp["client-list"] %}
    client-list {{ list["name"] }} {
        {%- for client in list["client-address-list"] %}
        {%- if client["restrict"] %}
        {{ client["name"] }} {
            restrict;
        }
        {%- else %}
        {{ client["name"] }};
        {%- endif %}
        {%- endfor %}
    }
    {%- endfor%}
    {%- for comm in snmp["community"] %}
    community {{ comm["name"] }} {
        {%- if comm["view"] %}
        view {{ comm["view"] }};
        {%- endif %}
        authorization {{ comm["authorization"] }};
        client-list-name {{ comm["client-list-name"] }};
        {%- for ri in comm["routing-instance"] %}
        routing-instance {{ ri["name"]|upper }};
        {%- endfor %}
    }
    {%- endfor %}
    {%- for tg in snmp["trap-group"] %}
    trap-group {{ tg["name"] }} {
        destination-port {{ tg["destination-port"] }};
        {%- for target in tg["targets"] %}
        targets {
            {{ target["name"] }};
        }
        {%- endfor %}
    }
    {%- endfor %}
    {%- if snmp["routing-instance-access"] %}
    routing-instance-access {
        access-list {
            {%- for ri in snmp["routing-instance-access"]["access-list"] %}
            {{ ri["name"]|upper }};
            {%- endfor %}
        }
    }
    {%- endif %}
}
{%- endif %}
{#- **************************************************
###           Chassis configuration              ###
**************************************************#}
chassis {
    {%- if device.virtual_chassis %}
    redundancy {
        graceful-switchover;
    }
    {%- endif %}
    aggregated-devices {
        ethernet {
            device-count {{ agg_dev_count | default("16", true) }};
        }
    }
    alarm {
        management-ethernet {
            link-down ignore;
        }
    }
}
{#- **************************************************
###               VC configuration               ###
**************************************************#}
{%- if device.virtual_chassis %}
virtual-chassis {
    preprovisioned;
    {%- if device.virtual_chassis.members.all() | length == 2 %}
    no-split-detection;
    {%- endif %}
    {%- for node in device.virtual_chassis.members.all() %}
    member {{ node.vc_position }} {
        {%- if node.cf.vc_role == "RE" %}
        role routing-engine;
        {%- else %}
        role line-card;
        {%- endif %}
        serial-number {{ node.serial }};
    }
    {%- endfor %}
}
{%- endif %}
{#- **************************************************
###           Interfaces configuration           ###
************************************************** #}
interfaces {
{{- ifs_config(interfaces) }}
}
{#- **************************************************
###              VLANs configuration             ###
**************************************************#}
vlans {
    default {
        vlan-id 1;
    }
    {%- for vl in device.site.vlans.all() %}
    VL_{{ vl.name|upper }} {
        vlan-id {{ vl.vid }};
        {%- for interface in interfaces %}
        {%- if "irb" in interface.name %}
        {%- set unit_id = interface.name.split('.')|last|int if '.' in interface.name else None %}
        {%- if unit_id == vl.vid %}
        l3-interface {{ interface.name }};
        {%- endif %}
        {%- endif %}
        {%- endfor %}
    }
    {%- endfor %}
}
{#- **************************************************
###          Routing-options configuration       ###
**************************************************#}
routing-options {
    forwarding-table {
        export lb;
    }
    {%- if device.virtual_chassis %}
    nonstop-routing;
    {%- endif %}
    {%- if static_routes["default"] is defined and static_routes["default"]["route"] %}
    static {
        {{- static_route_cfg(static_routes["default"]["route"]) | indent(8) }}
    }
    {%- endif %}
}
{#- **************************************************
###          Policy-options configuration       ###
**************************************************#}
policy-options {
    policy-statement lb {
        then {
            load-balance per-packet;
        }
    }
}
{#- **************************************************
###          Protocols configuration       ###
**************************************************#}
{%- if device.virtual_chassis %}
protocols {
    {%- if device.virtual_chassis %}
    layer2-control {
        nonstop-bridging;
    }
    {%- endif %}
}
{%- endif %}
{#- **************************************************
###                VRF configuration             ###
**************************************************#}
{{- vrf_cfg(instances) }}
{#- **************************************************
###                Forwarding options              ###
**************************************************#}
{%- if storm_control_profiles or dhcp_relay %}
forwarding-options {
    {%- if storm_control_profiles %}
    {%- for scp in storm_control_profiles %}
    storm-control-profiles {{ scp["name"] }} {
        all {
            {%- for param, value in scp.all.items() %}
            {%- if value | int > 0 %}
            {{ param }} {{ value }};
            {%- else %}
            {{ param }};
            {%- endif %}
            {%- endfor %}
        }
        {%- if  scp["action-shutdown"] %}
        action-shutdown;
        {%- endif %}
    }
    {%- endfor %}
    {%- endif %}
    {%- if dhcp_relay is defined and dhcp_relay["default"] %}
    {{- dhcp_relay_cfg(dhcp_relay["default"]) | indent(4) }}
    {%- endif %}
}
{%- endif %}
{#- **************************************************
###           System configuration               ###
**************************************************#}
{%- if device.virtual_chassis %}
groups {
    {%- for node in device.virtual_chassis.members.all() %}
    member{{ node.vc_position }} {
        system {
            host-name {{ node.name }};
        }
    }
    {%- endfor %}
}
apply-groups [ {% for node in device.virtual_chassis.members.all() %}member{{ node.vc_position }} {% endfor %}];
{%- endif %}
system {
    {%- if device.virtual_chassis %}
    commit synchronize;
    {%- else %}
    host-name {{ device.name }};
    {%- endif %}
    root-authentication {
        encrypted-password "{{ device.cf.root_password }}";
    }
    login {
        idle-timeout {{ device.cf.idle_timeout | string }};
    }
    services {
        ssh {
            root-login allow;
            protocol-version v2;
        }
        netconf {
            ssh {
                port {{ device.cf.netconf_port | string }};
            }
        }
    }
    syslog {
        user * {
            any emergency;
        }
        file interactive-commands {
            interactive-commands any;
        }
        file messages {
            any notice;
            authorization info;
        }
    }
}
{#- **************************************************
###           Chassis configuration              ###
**************************************************#}
chassis {
    aggregated-devices {
        ethernet {
            device-count {{ device.cf.agg_dev_count | string }};
        }
    }
    alarm {
        management-ethernet {
            link-down ignore;
        }
    }
}
{#- **************************************************
###               VC configuration               ###
**************************************************#}
{%- if device.virtual_chassis %}
virtual-chassis {
    preprovisioned;
    {%- if device.virtual_chassis.members.all() | length == 2 %}
    no-split-detection;
    {%- endif %}
    {%- for node in device.virtual_chassis.members.all() %}
    member {{ node.vc_position }} {
        {%- if node.cf.vc_role == "RE" %}
        role routing-engine;
        {%- else %}
        role line-card;
        {%- endif %}
        serial-number {{ node.serial }};
    }
    {%- endfor %}
}
{%- endif %}
{#- **************************************************
###           Interfaces configuration           ###
**************************************************#}
{%- macro ifs_config(interfaces) %}
{%- for interface in interfaces %}
{%- set ifname = interface.name.split('.')|first %}
{%- set unit_id = interface.name.split('.')|last if '.' in interface.name else None %}
{%- set count_ipaddr = interface.ip_addresses.all()|length %}
{%- set is_lag = interface.lag != None %}
{%- set lag_agg = interface.type == "lag" %}
{%- set has_tagged_vlans = interface.tagged_vlans != None and 'tagged' in interface.mode %}
{%- set is_access_mode = interface.mode == 'access' %}
    {{ interface.name }} {
        {%- if not interface.enabled %}
        disable;
        {%- endif %}
        {%- if interface.description %}
        description "{{ interface.description }}";
        {%- else %}
        description "Missing description";
        {%- endif %}
        {%- if lag_agg %}
        aggregated-ether-options {
            lacp {
                active;
            }
            minimum-links 1;
        }
        {%- endif %}
        {%- if count_ipaddr > 0 %}
        {%- if '.' in interface.name %}
        unit {{ unit_id or 0 }} {
        {%- else %}
        unit 0 {
        {%- endif %}
            family inet {
                {%- for ipaddr in interface.ip_addresses.all() %}
                address {{ ipaddr }};
                {%- endfor %}
            }
        }
        {%- elif is_lag %}
        gigether-options {
            802.3ad {
                {{ interface.lag.name }};
            }
        }
        {%- elif has_tagged_vlans %}
        unit 0 {
            family ethernet-switching {
            {%- if interface.mode == 'tagged' %}
                interface-mode trunk;
                vlan {
                    members [ {% for vlan in interface.tagged_vlans.all() %}{{ vlan.vid }} {% endfor %}];
                }
                {%- if interface.untagged_vlan != None %}
                native-vlan-id {{ interface.untagged_vlan.vid }};
                {%- endif %}
            {%- elif 'tagged-all' in interface.mode %}
                interface-mode trunk;
                vlan {
                    members all;
                }
                {%- if interface.untagged_vlan != None %}
                native-vlan-id {{ interface.untagged_vlan.vid }};
                {%- endif %}
            {%- endif %}
            }
        }
        {%- elif is_access_mode %}
        unit 0 {
            family ethernet-switching {
                interface-mode access;
                vlan {
                    members {{ interface.untagged_vlan.vid }};
                }
            }
        }
        {%- else %}
        unit 0;
        {%- endif %}
    }
    {%- endfor %}
{%- endmacro %}
interfaces {
{%- if device.virtual_chassis != None %}
{%- for node in device.virtual_chassis.members.all() %}
{{ ifs_config(node.interfaces.all()) }}
{%- endfor %}
{%- else %}
{{ ifs_config(device.interfaces.all()) }}
{%- endif %}
}
{#- **************************************************
###              VLANs configuration             ###
**************************************************#}
vlans {
    default {
        vlan-id 1;
    }
    {%- for vl in device.site.vlans.all() %}
    VL_{{ vl.name }} {
        vlan-id {{ vl.vid }};
        {%- for interface in device.interfaces.all() %}
        {%- if "irb" in interface.name %}
        {%- set unit_id = interface.name.split(".")[1] | int %}
        {%- if unit_id == vl.vid %}
        l3-interface {{ interface.name }};
        {%- endif %}
        {%- endif %}
        {%- endfor %}
    }
    {%- endfor %}
}
{#- **************************************************
###          Routing-options configuration       ###
**************************************************#}
routing-options {
    {%- if device.virtual_chassis %}
    nonstop-routing;
    {%- endif %}
    {%- if device.cf.static_routes != None %}
    {%- for vrf, routes in device.cf.static_routes.vrfs.items() %}
    {%- if vrf == "default" %}
    static {
        {%- for dest, next_hops in routes.dests.items() %}
        route {{ dest }} {
            {%- for nh, props in next_hops.nhs.items() %}
            {%- if not props["qualified"] %}
            next-hop {{ nh }};
            {%- else %}
            qualified-next-hop {{ nh }} {
                {%- if props["metric"] != "default" %}
                metric {{ props["metric"] }};
                {%- endif %}
                {%- if props["preference"] != "default" %}
                preference {{ props["preference"] }};
                {%- endif %}
            }
            {%- endif %}
            {%- endfor %}
        }
        {%- endfor %}
    }
    {%- endif %}
    {%- endfor %}
    {%- endif %}
}
{#- **************************************************
###          Protocols configuration       ###
**************************************************#}
protocols {
    {%- if device.virtual_chassis %}
    layer2-control {
        nonstop-bridging;
    }
    {%- endif %}
}
{#- **************************************************
###                VRF configuration             ###
**************************************************#}
{%- set instances = device.interfaces.all() | selectattr("vrf.name", "defined") | map(attribute="vrf.name") | unique | list %}
{%- if instances | length > 0 %}
routing-instances {
    {%- for instance in instances %}
    {{ instance }} {
        instance-type virtual-router;
        {%- for interface in device.interfaces.all() %}
        {%- if interface.vrf.name == instance %}
        interface {{ interface.name }};
        {%- endif %}
        {%- endfor %}
        {%- if device.cf.static_routes != None %}
        routing-options {
        {%- for vrf, routes in device.cf.static_routes.vrfs.items() %}
        {%- if vrf == instance %}
            static {
                {%- for dest, next_hops in routes.dests.items() %}
                route {{ dest }} {
                    {%- for nh, props in next_hops.nhs.items() %}
                    {%- if not props["qualified"] %}
                    next-hop {{ nh }};
                    {%- else %}
                    qualified-next-hop {{ nh }} {
                        {%- if props["metric"] != "default" %}
                        metric {{ props["metric"] }};
                        {%- endif %}
                        {%- if props["preference"] != "default" %}
                        preference {{ props["preference"] }};
                        {%- endif %}
                    }
                    {%- endif %}
                    {%- endfor %}
                {%- endfor %}
                }
        {%- endif %}
        {%- endfor %}
            }
        {%- endif %}
        }
    {%- endfor %}
    }
}
{%- endif %}